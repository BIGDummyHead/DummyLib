<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DummyLib</name>
    </assembly>
    <members>
        <member name="T:DummyLib.AssemblyWriter">
            <summary>
            Deals with writing to DLL and Executables Files
            </summary>
        </member>
        <member name="P:DummyLib.AssemblyWriter.Changes">
            <summary>
            Changes :: Provides Actions You Did
            </summary>
        </member>
        <member name="M:DummyLib.AssemblyWriter.CreateMethods(DummyLib.TargetType,DummyLib.IMethodCreator)">
            <summary>
            Creates Method(s)
            </summary>
            <param name="target"></param>
            <param name="methods"></param>
            <returns></returns>
        </member>
        <member name="P:DummyLib.AssemblyWriter.Context">
            <summary>
            The context of the Module
            </summary>
        </member>
        <member name="P:DummyLib.AssemblyWriter.Module">
            <summary>
            The module you are working on
            </summary>
        </member>
        <member name="M:DummyLib.AssemblyWriter.GetMethods(DummyLib.TargetType)">
            <summary>
            Returns <see cref="T:DummyLib.TargetMethod"/>[]
            <para>Returns Specifically <seealso cref="M:DummyLib.TargetMethod.#ctor(System.String,dnlib.DotNet.TypeSig[])"/></para>
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:DummyLib.AssemblyWriter.GetTypes">
            <summary>
            Get all the types from the <see cref="P:DummyLib.AssemblyWriter.Module"/> and returns them as <seealso cref="T:DummyLib.TargetType"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:DummyLib.AssemblyWriter.FindType(System.String)">
            <summary>
            Find a Type
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:DummyLib.AssemblyWriter.#ctor(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            
            </summary>
            <param name="targetFile"></param>
            <param name="output"></param>
            <param name="throwInternalErrors"></param>
            <param name="backUpFile"></param>
        </member>
        <member name="P:DummyLib.AssemblyWriter.TargetFile">
            <summary>
            The file to edit
            </summary>
        </member>
        <member name="P:DummyLib.AssemblyWriter.ThrowWriterErrors">
            <summary>
            Should the <see cref="T:DummyLib.AssemblyWriter"/> Throw internal method errors 
            </summary>
        </member>
        <member name="P:DummyLib.AssemblyWriter.Output">
            <summary>
            Where the file will be written to
            </summary>
        </member>
        <member name="M:DummyLib.AssemblyWriter.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="targetfile"></param>
        </member>
        <member name="M:DummyLib.AssemblyWriter.#ctor(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="targetFile"></param>
            <param name="outputFile"></param>
        </member>
        <member name="M:DummyLib.AssemblyWriter.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            
            </summary>
            <param name="targetFile"></param>
            <param name="outputFile"></param>
            <param name="throwInternalErrors"></param>
        </member>
        <member name="M:DummyLib.AssemblyWriter.#ctor(System.String,System.Boolean)">
            <summary>
            
            </summary>
            <param name="targetFile"></param>
            <param name="throwInternalErrors"></param>
        </member>
        <member name="M:DummyLib.AssemblyWriter.#ctor(System.String,System.Boolean,System.Boolean)">
            <summary>
            
            </summary>
            <param name="targetFile"></param>
            <param name="throwInternalErrors"></param>
            <param name="backUpFile"></param>
        </member>
        <member name="M:DummyLib.AssemblyWriter.IsReflectionName(System.String)">
             <summary>
             Checks if a Type Name is a Reflected Type
            <para>Reflection : Namespace.Name</para>
            <para>Nested : Namespace.Name+NestedName</para>
             </summary>
             <param name="name"></param>
             <returns></returns>
        </member>
        <member name="M:DummyLib.AssemblyWriter.IsNestedName(System.String)">
             <summary>
             Checks if a Type Name is a Nested Type
            <para>Reflection : Namespace.Name</para>
            <para>Nested : Namespace.Name+NestedName</para>
             </summary>
             <param name="name"></param>
             <returns></returns>
        </member>
        <member name="M:DummyLib.AssemblyWriter.GetFullName(dnlib.DotNet.TypeDef)">
            <summary>
            Get the full name of a <see cref="T:dnlib.DotNet.TypeDef"/>
            </summary>
            <param name="def"></param>
            <returns></returns>
        </member>
        <member name="M:DummyLib.AssemblyWriter.GetFullName(System.Type)">
            <summary>
            Get the full name of a <see cref="T:System.Type"/>
            </summary>
            <param name="def"></param>
            <returns></returns>
        </member>
        <member name="M:DummyLib.AssemblyWriter.Clone">
            <summary>
            Clones the Assembly Writer
            Does not create backup file...
            </summary>
            <returns></returns>
        </member>
        <member name="M:DummyLib.AssemblyWriter.ThrowException(System.Boolean,System.String)">
            <summary>
            If <paramref name="isBad"/> is True and <see cref="P:DummyLib.AssemblyWriter.ThrowWriterErrors"/> is True it will throw an exception
            <para>If <paramref name="isBad"/> is True and <seealso cref="P:DummyLib.AssemblyWriter.ThrowWriterErrors"/> is False it will return True</para>
            </summary>
            <param name="isBad"></param>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:DummyLib.AssemblyWriter.Save">
            <summary>
            Saves all your work to the <see cref="P:DummyLib.AssemblyWriter.Output"/>
            </summary>
        </member>
        <member name="M:DummyLib.AssemblyWriter.Dispose">
            <summary>
            Dispose this <see cref="T:DummyLib.AssemblyWriter"/>
            </summary>
        </member>
        <member name="M:DummyLib.AssemblyWriter.SaveAndDispose">
            <summary>
            Saves the Module <see cref="M:DummyLib.AssemblyWriter.Save"/> -> and <seealso cref="M:DummyLib.AssemblyWriter.Dispose"/>
            </summary>
        </member>
        <member name="M:DummyLib.AssemblyWriter.CanSave(System.String@)">
            <summary>
            Does not acutally save to your current <see cref="P:DummyLib.AssemblyWriter.Output"/> but sees if you can save to your <seealso cref="P:DummyLib.AssemblyWriter.Output"/>
            </summary>
            <returns></returns>
        </member>
        <member name="P:DummyLib.AssemblyWriter.CanWrite">
            <summary>
            Same as <see cref="M:DummyLib.AssemblyWriter.CanSave(System.String@)"/> but does not include reasoning
            </summary>
        </member>
        <member name="P:DummyLib.AssemblyWriter.DisposeSave">
            <summary>
            Save on Dispose
            </summary>
        </member>
        <member name="M:DummyLib.AssemblyWriter.TrySave">
            <summary>
            WARNING: TAKES EXTRA LONG TO SAVE BUT ENSURES THE MODULE WRITER DOES NOT THROW ERRORS
            </summary>
            <returns></returns>
        </member>
        <member name="M:DummyLib.AssemblyWriter.CopyConstructors(DummyLib.TargetType,DummyLib.IHasConstructors)">
            <summary>
            Copies the constructors from <paramref name="typeCTORS"/> and paste them to <paramref name="target"/>
            </summary>
            <param name="target"></param>
            <param name="typeCTORS"></param>
        </member>
        <member name="M:DummyLib.AssemblyWriter.CreateType(DummyLib.UserType)">
            <summary>
            Creates a Type To The <see cref="P:DummyLib.AssemblyWriter.Module"/>
            </summary>
            <param name="userType">A User Type</param>
        </member>
        <member name="M:DummyLib.AssemblyWriter.AddExistingType(System.Type,System.String,System.String,DummyLib.ITypeResolver)">
            <summary>
            Add an existing <see cref="T:System.Type"/> to the <seealso cref="P:DummyLib.AssemblyWriter.Module"/> with a different namespace and name
            <para>Does not work with Inheritance</para>
            </summary>
            <param name="existingType"></param>
            <param name="newNameSpace"></param>
            <param name="name"></param>
            <param name="resolver">If not supplied, the Writer will supply one for you <see cref="T:DummyLib.BasicTypeResolver"/></param>
            <returns></returns>
        </member>
        <member name="M:DummyLib.AssemblyWriter.AddExistingType(dnlib.DotNet.ITypeDefOrRef,System.String,DummyLib.ITypeResolver)">
            <summary>
            
            </summary>
            <param name="existingType"></param>
            <param name="resolver"></param>
            <param name="newNamespace"></param>
            <returns></returns>
        </member>
        <member name="M:DummyLib.AssemblyWriter.AddExistingType(dnlib.DotNet.ITypeDefOrRef,DummyLib.ITypeResolver)">
            <summary>
            Add an Existing Type with the same namespace as the <paramref name="existingType"/>
            </summary>
            <param name="existingType"></param>
            <param name="resolver"></param>
            <returns></returns>
        </member>
        <member name="M:DummyLib.AssemblyWriter.AddExistingType(System.Type,DummyLib.ITypeResolver)">
            <summary>
            Adds an existing <see cref="T:System.Type"/> to the <seealso cref="P:DummyLib.AssemblyWriter.Module"/>
            </summary>
            <param name="existingType"></param>
            <param name="resolver"></param>
            <returns></returns>
        </member>
        <member name="M:DummyLib.AssemblyWriter.AddInstruction(DummyLib.TargetType,DummyLib.TargetMethod,DummyLib.InstructionPoint)">
            <summary>
            Adds an Instruction To A Method...
            <para>This method has a chance of throwing many errors if you do not know where you should place your Instruction</para>
            <para>Also see: <see cref="M:DummyLib.InstructionCreator.CreateInstruction(dnlib.DotNet.Emit.OpCode,System.Object,System.Int32)"/></para>
            </summary>
        </member>
        <member name="M:DummyLib.AssemblyWriter.RemoveInstruction(DummyLib.TargetType,DummyLib.TargetMethod,System.Int32)">
            <summary>
            Removes An Instruction From A Method...
            <para>This method has a chance of throwing many errors if you do not know where you should remvove your Instruction</para>
            </summary>
            <param name="target"></param>
            <param name="method"></param>
            <param name="removalPoint"></param>
            <returns></returns>
        </member>
        <member name="M:DummyLib.AssemblyWriter.AddInstructions(DummyLib.TargetType,DummyLib.TargetMethod,DummyLib.InstructionPoint[])">
            <summary>
            Adds multiple Instructions To A Method
            <para>This method has a chance of throwing many errors if you do not know where you should add your Instructions</para>
            </summary>
            <param name="target"></param>
            <param name="method"></param>
            <param name="instructions"></param>
            <returns></returns>
        </member>
        <member name="M:DummyLib.AssemblyWriter.RemoveInstructions(DummyLib.TargetType,DummyLib.TargetMethod,System.Int32[])">
            <summary>
            Removes Multiple Instructions From A Method...
            <para>This method has a chance of throwing many errors if you do not know where you should remvove your Instructions</para>
            </summary>
            <param name="target"></param>
            <param name="method"></param>
            <param name="removalPoints"></param>
            <returns></returns>
        </member>
        <member name="M:DummyLib.AssemblyWriter.CreateField``1(DummyLib.TargetType,DummyLib.UserField{``0})">
            <summary>
            Creates a Field In The <paramref name="target"/> Type
            </summary>
            <typeparam name="T"></typeparam>
            <param name="target"></param>
            <param name="userField"></param>
            <returns></returns>
        </member>
        <member name="M:DummyLib.AssemblyWriter.CreateProperty``1(DummyLib.TargetType,DummyLib.Property{``0},dnlib.DotNet.MethodAttributes)">
            <summary>
            Creates a property inside the <paramref name="target"/> 
            </summary>
            <typeparam name="T"></typeparam>
            <param name="target"></param>
            <param name="userProp"></param>
            <param name="attrs"></param>
        </member>
        <member name="T:DummyLib.ResolveData">
            <summary>
            Type Import Data
            </summary>
        </member>
        <member name="P:DummyLib.ResolveData.Namespace">
            <summary>
            Namespace of the Type - Can return null or <see cref="F:System.String.Empty"/>
            </summary>
        </member>
        <member name="P:DummyLib.ResolveData.TypeName">
            <summary>
            Name of the Type
            </summary>
        </member>
        <member name="P:DummyLib.ResolveData.ImportType">
            <summary>
            Type to import
            </summary>
        </member>
        <member name="P:DummyLib.ResolveData.FullName">
            <summary>
            The Full Name Of The Type
            </summary>
        </member>
        <member name="M:DummyLib.ResolveData.#ctor(dnlib.DotNet.ITypeDefOrRef)">
            <summary>
            Import Data On <see cref="T:System.Type"/> <paramref name="t"/>
            </summary>
            <param name="t"></param>
        </member>
        <member name="T:DummyLib.BasicTypeResolver">
            <summary>
            Resolves imported Assemblies
            </summary>
        </member>
        <member name="P:DummyLib.BasicTypeResolver.ResolvedTypes">
            <summary>
            The Resolved Type Names
            </summary>
        </member>
        <member name="M:DummyLib.BasicTypeResolver.ResolveType(DummyLib.AssemblyWriter,DummyLib.ResolveData,System.String,DummyLib.ITypeResolver)">
            <summary>
            
            </summary>
            <param name="writer"></param>
            <param name="rd"></param>
            <param name="resolver"></param>
            <param name="_namespace">The new namespace of the resolved Type</param>
            <returns></returns>
        </member>
        <member name="T:DummyLib.ITypeResolver">
            <summary>
            Used for Resolving Assemblies -- 
            Used By <see cref="T:DummyLib.AssemblyWriter"/>
            </summary>
        </member>
        <member name="M:DummyLib.ITypeResolver.ResolveType(DummyLib.AssemblyWriter,DummyLib.ResolveData,System.String,DummyLib.ITypeResolver)">
            <summary>
            Resolve A Type 
            </summary>
            <param name="writer"></param>
            <param name="rd"></param>
            <param name="_namespace"></param>
            <param name="resolver"></param>
            <returns></returns>
        </member>
        <member name="T:DummyLib.CreatedMethod">
            <summary>
            </summary>
        </member>
        <member name="P:DummyLib.CreatedMethod.Target">
            <summary>
            The <see cref="T:DummyLib.TargetMethod"/> generated 
            </summary>
        </member>
        <member name="P:DummyLib.CreatedMethod.MethodCreated">
            <summary>
            The <see cref="T:dnlib.DotNet.MethodDef"/> generated
            </summary>
        </member>
        <member name="M:DummyLib.CreatedMethod.#ctor(DummyLib.TargetMethod,dnlib.DotNet.MethodDef)">
            <summary>
            
            </summary>
            <param name="target"></param>
            <param name="created"></param>
        </member>
        <member name="T:DummyLib.ExistingType">
            <summary>
            An Existing Type
            </summary>
        </member>
        <member name="M:DummyLib.ExistingType.#ctor(System.Type)">
            <summary>
            
            </summary>
            <param name="existingType"></param>
        </member>
        <member name="M:DummyLib.ExistingType.#ctor(System.Type,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="existingType"></param>
            <param name="_namespace"></param>
            <param name="name"></param>
        </member>
        <member name="P:DummyLib.ExistingType.Fields">
            <summary>
            Fields
            </summary>
        </member>
        <member name="P:DummyLib.ExistingType.Methods">
            <summary>
            Methods
            </summary>
        </member>
        <member name="P:DummyLib.ExistingType.Properties">
            <summary>
            Properties
            </summary>
        </member>
        <member name="P:DummyLib.ExistingType.Events">
            <summary>
            Events
            </summary>
        </member>
        <member name="P:DummyLib.ExistingType.Interfaces">
            <summary>
            Interfaces
            </summary>
        </member>
        <member name="P:DummyLib.ExistingType.Inherit">
            <summary>
            The <see cref="T:dnlib.DotNet.TypeDef"/> The Existing Type Inherits
            </summary>
        </member>
        <member name="T:DummyLib.Extensions">
            <summary>
            Extensions For Dnlib Types and or DummyLib Types
            </summary>
        </member>
        <member name="M:DummyLib.Extensions.ToTarget(dnlib.DotNet.ITypeDefOrRef)">
            <summary>
            Takes a <see cref="T:dnlib.DotNet.ITypeDefOrRef"/> and makes a <see cref="T:DummyLib.TargetType"/>
            </summary>
            <param name="tRef"></param>
            <returns></returns>
        </member>
        <member name="M:DummyLib.Extensions.ToType(DummyLib.SpecialTargetType)">
            <summary>
            Returns a <see cref="T:DummyLib.SpecialTargetType"/> back to a <seealso cref="T:dnlib.DotNet.TypeDef"/>
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:DummyLib.Extensions.GetMethod(System.Collections.Generic.IEnumerable{dnlib.DotNet.MethodDef},System.String,System.Type[])">
            <summary>
            Gets A Method From A <see cref="T:System.Collections.Generic.IEnumerable`1"/> From A <seealso cref="T:System.Type"/>[]
            </summary>
            <param name="methods"></param>
            <param name="args"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:DummyLib.Extensions.GetMethod(System.Collections.Generic.IEnumerable{dnlib.DotNet.MethodDef},System.String,dnlib.DotNet.TypeSig[])">
            <summary>
            Gets A Method From A <see cref="T:System.Collections.Generic.IEnumerable`1"/> From A <seealso cref="T:dnlib.DotNet.TypeSig"/>[]
            </summary>
            <param name="methods"></param>
            <param name="args"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:DummyLib.Extensions.GetMethod(dnlib.DotNet.TypeDef,System.String,System.Type[])">
            <summary>
            Get a method from a TypeDef providing a <see cref="T:System.String"/> <paramref name="name"/> and providing <seealso cref="T:System.Type"/>[] <paramref name="args"/>
            </summary>
            <param name="receiveMethods"></param>
            <param name="name"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:DummyLib.Extensions.GetMethod(dnlib.DotNet.TypeDef,System.String,dnlib.DotNet.TypeSig[])">
            <summary>
            Get a method from a TypeDef providing a <see cref="T:System.String"/> <paramref name="name"/> and providing <seealso cref="T:dnlib.DotNet.TypeSig"/>[] <paramref name="args"/>
            </summary>
            <param name="receiveMethods"></param>
            <param name="name"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:DummyLib.Extensions.ToTarget(dnlib.DotNet.MethodDef)">
            <summary>
            Takes a <see cref="T:dnlib.DotNet.MethodDef"/> and makes a <seealso cref="T:DummyLib.SpecialTargetMethod"/>
            </summary>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="M:DummyLib.Extensions.ToMethod(DummyLib.SpecialTargetMethod)">
            <summary>
            Takes a <see cref="T:DummyLib.SpecialTargetMethod"/> and makes a <seealso cref="T:dnlib.DotNet.MethodDef"/>
            </summary>
            <param name="specialMethod"></param>
            <returns></returns>
        </member>
        <member name="P:DummyLib.Extensions.MainContext">
            <summary>
            The main context of <see cref="M:DummyLib.Extensions.CreateModule(System.Reflection.Module)"/>
            </summary>
        </member>
        <member name="M:DummyLib.Extensions.CreateModule(System.Reflection.Module)">
            <summary>
            Creates A Module From See <see cref="T:System.Reflection.Module"/>
            <para>Mainly Used As <seealso cref="T:System.Type"/>.<seealso cref="T:System.Reflection.Module"/>.<seealso cref="M:DummyLib.Extensions.CreateModule(System.Reflection.Module)"/></para>
            </summary>
            <param name="module"></param>
            <returns></returns>
        </member>
        <member name="M:DummyLib.Extensions.Find(dnlib.DotNet.ModuleDefMD,System.String)">
            <summary>
            Easily Find A Type
            </summary>
            <param name="module"></param>
            <param name="fullName"></param>
            <returns></returns>
        </member>
        <member name="M:DummyLib.Extensions.CreateInstruction(dnlib.DotNet.Emit.OpCode,System.Object,System.Int32)">
            <summary>
            Create an <see cref="T:DummyLib.InstructionPoint"/> From a OpCode
            </summary>
            <param name="op"></param>
            <param name="opperand"></param>
            <param name="replacementPoint"></param>
            <returns></returns>
        </member>
        <member name="M:DummyLib.Extensions.CreateEmptyInstruction(dnlib.DotNet.Emit.OpCode,System.Int32)">
            <summary>
            Create an Empty <see cref="T:DummyLib.InstructionPoint"/>
            </summary>
            <param name="op"></param>
            <param name="replacementPoint"></param>
            <returns></returns>
        </member>
        <member name="T:DummyLib.Field`1">
            <summary>
            A Field For <see cref="T:DummyLib.AssemblyWriter"/> (<typeparamref name="T"/>)
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:DummyLib.Field`1.Val">
            <summary>
            
            </summary>
        </member>
        <member name="P:DummyLib.Field`1.FieldName">
            <summary>
            The name of the field
            </summary>
        </member>
        <member name="M:DummyLib.Field`1.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="fieldName"></param>
        </member>
        <member name="T:DummyLib.IHasConstructors">
            <summary>
            Specifies That The Type Has Constructors To Copy
            <para>Does Not Require Any Data</para>
            </summary>
        </member>
        <member name="T:DummyLib.IMethodCreator">
            <summary>
            Create Method(s)
            </summary>
        </member>
        <member name="P:DummyLib.IMethodCreator.Methods">
            <summary>
            Methods
            </summary>
        </member>
        <member name="T:DummyLib.InstructionCreator">
            <summary>
            Creates Instruction With Pointers 
            </summary>
        </member>
        <member name="M:DummyLib.InstructionCreator.CreateInstruction(dnlib.DotNet.Emit.OpCode,System.Object,System.Int32)">
            <summary>
            Creates a <see cref="T:DummyLib.InstructionPoint"/>
            </summary>
            <param name="opcode"></param>
            <param name="opperand"></param>
            <param name="replacementPoint">Where to place the <paramref name="opcode"/> and <paramref name="opperand"/></param>
            <returns></returns>
        </member>
        <member name="M:DummyLib.InstructionCreator.CreateEmptyInstruction(dnlib.DotNet.Emit.OpCode,System.Int32)">
            <summary>
            Creats an Empty <see cref="T:DummyLib.InstructionPoint"/>
            </summary>
            <param name="opcode"></param>
            <param name="replacementPoint">Where to place the <paramref name="opcode"/></param>
            <returns></returns>
        </member>
        <member name="T:DummyLib.InstructionPoint">
            <summary>
            Used in <see cref="T:DummyLib.AssemblyWriter"/>
            </summary>
        </member>
        <member name="P:DummyLib.InstructionPoint.Instruction">
            <summary>
            The instruction that is created
            </summary>
        </member>
        <member name="P:DummyLib.InstructionPoint.ReplacementPoint">
            <summary>
            Where the instruction should be placed
            </summary>
        </member>
        <member name="M:DummyLib.InstructionPoint.#ctor(dnlib.DotNet.Emit.Instruction,System.Int32)">
            <summary>
            
            </summary>
            <param name="instruction"></param>
            <param name="replacementPoint"></param>
        </member>
        <member name="M:DummyLib.InstructionPoint.ToString">
            <summary>
            A Overview Of Your <see cref="T:DummyLib.InstructionPoint"/>
            </summary>
            <returns></returns>
        </member>
        <member name="T:DummyLib.Property`1">
            <summary>
            An abstract class, this class is meant to generate properties inside of your <see cref="T:DummyLib.TargetType"/>
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:DummyLib.Property`1.CreateEmptyProperty(DummyLib.AssemblyWriter,DummyLib.TargetType,System.String,dnlib.DotNet.MethodAttributes)">
            <summary>
            Creates an Empty Property Of Type <typeparamref name="T"/>
            </summary>
            <param name="writer"></param>
            <param name="target"></param>
            <param name="propName">Name of said Property</param>
            <param name="propAttrs">Property Attributes</param>
        </member>
        <member name="P:DummyLib.Property`1.Val">
            <summary>
            Leave Me Empty
            </summary>
        </member>
        <member name="M:DummyLib.Property`1.GetMethod">
            <summary>
            The method that is called when the property is Gotten
            <para>You can call throw <see cref="T:System.NotImplementedException"/>("EMPTY"); and the Get method will be empty</para>
            </summary>
            <returns></returns>
        </member>
        <member name="M:DummyLib.Property`1.SetMethod">
            <summary>
            The method that is called when the property is Set
            <para>You can call throw <see cref="T:System.NotImplementedException"/>("EMPTY"); and the Get method will be empty</para>
            </summary>
            <returns></returns>
        </member>
        <member name="P:DummyLib.Property`1.Name">
            <summary>
            The name of the property
            </summary>
        </member>
        <member name="M:DummyLib.Property`1.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
        </member>
        <member name="T:DummyLib.EmptyProperty`1">
            <summary>
            An Empty Property
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:DummyLib.EmptyProperty`1.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
        </member>
        <member name="P:DummyLib.EmptyProperty`1.Val">
            <summary>
            EMPTY
            </summary>
        </member>
        <member name="M:DummyLib.EmptyProperty`1.GetMethod">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:DummyLib.EmptyProperty`1.SetMethod">
            <summary>
            
            </summary>
        </member>
        <member name="T:DummyLib.SpecialTargetMethod">
            <summary>
            A Special <see cref="T:DummyLib.TargetMethod"/>
            </summary>
        </member>
        <member name="P:DummyLib.SpecialTargetMethod.Target">
            <summary>
            The Target
            </summary>
        </member>
        <member name="M:DummyLib.SpecialTargetMethod.#ctor(dnlib.DotNet.MethodDef)">
            <summary>
            
            </summary>
            <param name="method"></param>
        </member>
        <member name="T:DummyLib.SpecialTargetType">
            <summary>
            A Special <see cref="T:DummyLib.TargetType"/>
            </summary>
        </member>
        <member name="P:DummyLib.SpecialTargetType.Target">
            <summary>
            Target
            </summary>
        </member>
        <member name="M:DummyLib.SpecialTargetType.#ctor(dnlib.DotNet.TypeDef)">
            <summary>
            
            </summary>
            <param name="_type"></param>
        </member>
        <member name="T:DummyLib.TargetMethod">
            <summary>
            A Method to target from a <see cref="T:System.Type"/>
            </summary>
        </member>
        <member name="P:DummyLib.TargetMethod.MethodName">
            <summary>
            The Method's Name
            </summary>
        </member>
        <member name="P:DummyLib.TargetMethod.MethodArgs">
            <summary>
            The Method's Type Arguments -- Can Be Null
            </summary>
        </member>
        <member name="P:DummyLib.TargetMethod.MethodArgs_Sig">
            <summary>
            The Method's TypeSig Arguments -- Never Null
            </summary>
        </member>
        <member name="P:DummyLib.TargetMethod.Method">
            <summary>
            The Method's Signature : Returns Null If Not Assigned 
            </summary>
        </member>
        <member name="M:DummyLib.TargetMethod.#ctor(System.String,System.Type[])">
            <summary>
            
            </summary>
            <param name="methodName"></param>
            <param name="methodArguments"></param>
        </member>
        <member name="M:DummyLib.TargetMethod.#ctor(System.String,dnlib.DotNet.TypeSig[])">
            <summary>
            
            </summary>
            <param name="methodName"></param>
            <param name="methodArguments"></param>
        </member>
        <member name="M:DummyLib.TargetMethod.#ctor(System.String,dnlib.DotNet.MethodSig,dnlib.DotNet.TypeSig[])">
            <summary>
            
            </summary>
            <param name="methodName"></param>
            <param name="methodSig"></param>
            <param name="methodArguments"></param>
        </member>
        <member name="M:DummyLib.TargetMethod.#ctor(System.String,dnlib.DotNet.MethodSig,System.Type[])">
            <summary>
            
            </summary>
            <param name="methodName"></param>
            <param name="methodSig"></param>
            <param name="methodArguments"></param>
        </member>
        <member name="M:DummyLib.TargetMethod.ToString">
            <summary>
            An Override Of <see cref="M:DummyLib.TargetMethod.ToString"/> Provides a Beatuiful Display of Your Method
            </summary>
            <returns></returns>
        </member>
        <member name="T:DummyLib.TargetType">
            <summary>
            Helps the <see cref="T:DummyLib.AssemblyWriter"/> Find Types Easily
            </summary>
        </member>
        <member name="P:DummyLib.TargetType.TargetName">
            <summary>
            The name of the Target
            </summary>
        </member>
        <member name="M:DummyLib.TargetType.#ctor(System.Type)">
            <summary>
            
            </summary>
            <param name="targetType"></param>
        </member>
        <member name="P:DummyLib.TargetType.IsReflectionName">
            <summary>
            Is A Reflection Name
            <para>Reflection : Namespace.TypeName</para>
            <para>Nested : Namespace.TypeName+NestedTypeName</para>
            </summary>
        </member>
        <member name="M:DummyLib.TargetType.#ctor(dnlib.DotNet.TypeDef)">
            <summary>
            
            </summary>
            <param name="targetType"></param>
        </member>
        <member name="P:DummyLib.TargetType.TypeDefinition">
            <summary>
            <see cref="T:dnlib.DotNet.TypeDef"/> -- Not Null If Using <see cref="M:DummyLib.TargetType.#ctor(dnlib.DotNet.TypeDef)"/>
            </summary>
        </member>
        <member name="M:DummyLib.TargetType.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="targetName"></param>
        </member>
        <member name="M:DummyLib.TargetType.ToString">
            <summary>
            Returns a Nice Overlay of your target
            </summary>
            <returns></returns>
        </member>
        <member name="T:DummyLib.UserField`1">
            <summary>
            Generates a User Field
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:DummyLib.UserField`1.Field">
            <summary>
            The Field that gets generated
            </summary>
        </member>
        <member name="P:DummyLib.UserField`1.Value">
            <summary>
            The initial value of the Field
            </summary>
        </member>
        <member name="P:DummyLib.UserField`1.Attributes">
            <summary>
            The Attributes of the <see cref="P:DummyLib.UserField`1.Field"/>
            </summary>
        </member>
        <member name="M:DummyLib.UserField`1.#ctor(DummyLib.Field{`0},`0,dnlib.DotNet.FieldAttributes)">
            <summary>
            
            </summary>
            <param name="field"></param>
            <param name="value"></param>
            <param name="attributes"></param>
        </member>
        <member name="M:DummyLib.UserField`1.#ctor(System.String,`0,dnlib.DotNet.FieldAttributes)">
            <summary>
            Make a <see cref="T:DummyLib.Field`1"/> By <paramref name="fieldName"/>
            </summary>
            <param name="fieldName"></param>
            <param name="value"></param>
            <param name="attributes"></param>
        </member>
        <member name="T:DummyLib.UserMethod">
            <summary>
            A UserMethod That Takes In <see cref="T:DummyLib.IMethodCreator"/>, <seealso cref="T:System.String"/>
            </summary>
        </member>
        <member name="P:DummyLib.UserMethod.Method">
            <summary>
            
            </summary>
        </member>
        <member name="P:DummyLib.UserMethod.MethodName">
            <summary>
            The methods name
            </summary>
        </member>
        <member name="M:DummyLib.UserMethod.#ctor(DummyLib.IMethodCreator,System.String)">
            <summary>
            
            </summary>
            <param name="method"></param>
            <param name="methodName"></param>
        </member>
        <member name="T:DummyLib.UserType">
            <summary>
            </summary>
        </member>
        <member name="P:DummyLib.UserType.Namespace">
            <summary>
            The namespace of your user type
            </summary>
        </member>
        <member name="P:DummyLib.UserType.Name">
            <summary>
            The name of the type
            </summary>
        </member>
        <member name="P:DummyLib.UserType.Attributes">
            <summary>
            The Attributes of The Type
            </summary>
        </member>
        <member name="P:DummyLib.UserType.FullName">
            <summary>
            Returns The Full Name Of The User Type
            </summary>
        </member>
        <member name="M:DummyLib.UserType.#ctor(System.String,System.String,dnlib.DotNet.TypeAttributes)">
            <summary>
            Makes A Data Container For <see cref="M:DummyLib.AssemblyWriter.CreateType(DummyLib.UserType)"/>
            </summary>
            <param name="_namespace"></param>
            <param name="name"></param>
            <param name="attrs"></param>
        </member>
        <member name="M:DummyLib.UserType.#ctor(System.Type)">
            <summary>
            
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:DummyLib.UserType.#ctor(System.Type,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="type"></param>
            <param name="_namespace"></param>
            <param name="name"></param>
        </member>
    </members>
</doc>
